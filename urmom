{"files":{"init.lua":"VX = {}\nVX.cells = {}\nVX.cellKey = \"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!$%&+-.=?^{}\";\n\nVX.cheatsheet = {}\n\nfor i = 1, #VX.cellKey do\n    VX.cheatsheet[VX.cellKey:sub(i, i)] = (i - 1)\nend\n\nfunction VX:decodeNum(n)\n    local output = 0\n\n    for i = 1, #n do\n        output = output * (#VX.cellKey)\n        output = output + (VX.cheatsheet[n:sub(i, i)])\n    end\n\n    return output\nend\n\n-- private static void SetCell(int c, int i)\n--         {\n--             \/\/c is celldata index, i is level position index\n--             if (c % 2 == 1)\n--                 GridManager.instance.tilemap.SetTile(new Vector3Int(i % CellFunctions.gridWidth, i \/ CellFunctions.gridWidth, 0), GridManager.instance.placebleTile);\n--             if (c >= 72)\n--                 return;\n--             GridManager.instance.SpawnCell(\n--                 (CellType_e)((c \/ 2) % 9),\n--                 new Vector2(i % CellFunctions.gridWidth, i \/ CellFunctions.gridWidth),\n--                 (Direction_e)(c \/ 18),\n--                 false);\n--         }\n\n---@param g FixedGrid\n---@param c number\n---@param i number\nfunction VX:setCell(g, c, i)\n    local x = i % g.width + 1\n    local y = g.height - math.floor(i \/ g.height) -- We gotta flip it because... Unity\n    if c % 2 == 1 then\n        g:setBackground(x, y, Cell(\"place\", 0, {}))\n    end\n\n    if c >= 72 then return end\n\n    g:set(x, y, Cell(VX.cells[math.floor(c \/ 2) % #(VX.cells)], math.floor(c \/ 18), {}))\nend\n\nCreateFormat(\"V1\", \"V1;\", nil, require(\"packages.VX.v1\"))\nCreateFormat(\"V2\", \"V2;\", nil, require(\"packages.VX.v2\"))\nCreateFormat(\"V3\", \"V3;\", nil, require(\"packages.VX.v3\"))\n","v3.lua":"---@param str string\n-- Based on the V3 decoder in https:\/\/github.com\/TestAccountAaa\/Cell-Machine-Mystic-Mod\/blob\/master\/Assets\/Assets\/Scripts\/LoadString.cs\nreturn function(str)\n  local segs = SplitStr(str, ';')\n  table.remove(segs, 1)\n\n  local length\n  local dataIndex = 1\n  local gridIndex = 0\n  local temp\n\n  local width = VX:decodeNum(segs[1])\n  local height = VX:decodeNum(segs[2])\n\n  local grid = FixedGrid(width, height)\n\n  local cells = segs[3]\n\n  local offset\n  local cellDataHistory = {}\n\n  while dataIndex <= #cells do\n    if cells:sub(dataIndex, dataIndex) == \")\" or cells:sub(dataIndex, dataIndex) == \"(\" then\n      if cells:sub(dataIndex, dataIndex) == \")\" then\n        dataIndex = dataIndex + 2\n        offset = VX.cheatsheet[cells:sub(dataIndex - 1, dataIndex - 1)]\n        length = VX.cheatsheet[cells:sub(dataIndex, dataIndex)]\n      else\n        dataIndex = dataIndex + 1\n        temp = \"\"\n        while cells:sub(dataIndex, dataIndex) ~= \")\" and cells:sub(dataIndex, dataIndex) ~= \"(\" do\n          if cells:sub(dataIndex, dataIndex) ~= \")\" then\n            temp = temp .. cells:sub(dataIndex, dataIndex)\n            dataIndex = dataIndex + 1\n          end\n        end\n        offset = VX:decodeNum(temp)\n        if cells:sub(dataIndex, dataIndex) == \")\" then\n          dataIndex = dataIndex + 1\n          length = VX.cheatsheet[dataIndex]\n        else\n          dataIndex = dataIndex + 1\n          temp = \"\"\n          while cells:sub(dataIndex, dataIndex) ~= \")\" do\n            if cells:sub(dataIndex, dataIndex) ~= \")\" then\n              temp = temp .. cells:sub(dataIndex, dataIndex)\n              dataIndex = dataIndex + 1\n            end\n          end\n          length = VX:decodeNum(temp)\n        end\n      end\n\n      for i = 1, length do\n        VX:setCell(grid, cellDataHistory[gridIndex - offset - 1], gridIndex)\n        cellDataHistory[gridIndex] = cellDataHistory[gridIndex - offset - 1]\n        gridIndex = gridIndex + 1\n      end\n    else\n      VX:setCell(grid, VX.cheatsheet[cells:sub(dataIndex, dataIndex)], gridIndex)\n      cellDataHistory[gridIndex] = VX.cheatsheet[cells:sub(dataIndex, dataIndex)]\n      gridIndex = gridIndex + 1\n    end\n\n    dataIndex = dataIndex + 1\n  end\nend\n","v2.lua":"---@param str string\n-- Based on the V2 decoder in https:\/\/github.com\/TestAccountAaa\/Cell-Machine-Mystic-Mod\/blob\/master\/Assets\/Assets\/Scripts\/LoadString.cs\nreturn function(str)\n  local segs = SplitStr(str, ';')\n  table.remove(segs, 1)\n\n  local length\n  local dataIndex = 1\n  local gridIndex = 0\n  local temp\n\n  local width = VX:decodeNum(segs[1])\n  local height = VX:decodeNum(segs[2])\n\n  local grid = FixedGrid(width, height)\n\n  local cells = segs[3]\n\n  local cellData\n\n  while dataIndex <= #cells do\n    if cells:sub(dataIndex, dataIndex) == ')' or cells:sub(dataIndex, dataIndex) == '(' then\n      cellData = VX.cheatsheet[cells:sub(dataIndex - 1, dataIndex - 1)]\n      if cells:sub(dataIndex, dataIndex) == ')' then\n        dataIndex = dataIndex + 1\n        length = VX.cheatsheet[cells:sub(dataIndex, dataIndex)]\n      else\n        dataIndex = dataIndex + 1\n        temp = \"\"\n        while cells:sub(dataIndex, dataIndex) ~= \")\" do\n          temp = temp .. cells:sub(dataIndex, dataIndex)\n          dataIndex = dataIndex + 1\n        end\n        length = VX:decodeNum(temp)\n      end\n\n      if cellData ~= 72 then\n        for i = 0, length - 1, 1 do\n          VX:setCell(grid, cellData, gridIndex + i)\n        end\n      end\n      gridIndex = gridIndex + length\n    else\n      VX:setCell(grid, VX.cheatsheet[cells:sub(dataIndex, dataIndex)], gridIndex)\n    end\n    dataIndex = dataIndex + 1\n  end\n\n  return grid\nend\n","v1.lua":"---@param str string\n-- Based on the V1 decoder in https:\/\/github.com\/TestAccountAaa\/Cell-Machine-Mystic-Mod\/blob\/master\/Assets\/Assets\/Scripts\/LoadString.cs\nreturn function(str)\n  local segs = SplitStr(str, ';')\n  table.remove(segs, 1) -- Remove header\n\n  local width = tonumber(segs[1])\n  local height = tonumber(segs[2])\n\n  local grid = FixedGrid(width, height)\n\n  local placementCellLocationsStr = SplitStr(segs[3], ',')\n  if placementCellLocationsStr[1] ~= \"\" then\n    for _, s in ipairs(placementCellLocationsStr) do\n      local ssplit = SplitStr(s, '.')\n      local x = tonumber(ssplit[1]) + 1\n      local y = height - tonumber(ssplit[2])\n      grid:setBackground(x, y, Cell(\"place\", 0, {}))\n    end\n  end\n\n  local cellStr = SplitStr(segs[4], ',')\n  if cellStr[1] ~= \"\" then\n    for _, s in ipairs(cellStr) do\n      local split = SplitStr(s, '.')\n      local x = tonumber(split[2])\n      local y = height - tonumber(split[3]) - 1\n      local id = VX.cells[tonumber(split[1])]\n      local rot = tonumber(split[4])\n\n      grid:set(x, y, Cell(id, rot, {}))\n    end\n  end\n\n  return grid\nend\n"},"name":"urmom"}